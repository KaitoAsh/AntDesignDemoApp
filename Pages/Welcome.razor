@page "/"
@using MyAntDesignApp.Components
@inject ModalService _modalService

<Space>
    <SpaceItem>
        <Button OnClick="OpenModal" Type="primary">Open a Modal by CreateModal()</Button>
        <Button OnClick="OpenConfirm" Type="primary">Open a Modal by Confirm()</Button>
    </SpaceItem>
</Space>

<Space>
    <Button Type="primary" OnClick="@ShowModal">
        Open Modal with async logic
    </Button>
    <Modal Title="@("Title")"
           Visible="@_visible"
           OnOk="@HandleOk"
           OnCancel="@HandleCancel"
           ConfirmLoading="@_confirmLoading">
        <p>@_modalText</p>
    </Modal>
</Space>

@code {
    string _okText = "OK!";
    string _cancelText = "Cancel?";
    string _title = "Override Locale";
    string _modalText = "Content of the modal";

    bool _visible = false;
    bool _confirmLoading = false;
    int _width = 800;

    RenderFragment FormTemplate()
    {
        //return @<div>@_modalText</div>;

        RenderFragment renderFragment = builder =>
        {
            builder.OpenComponent<Menu1>(0);
            //builder.AddAttribute(1, "Title", title);
            //builder.AddAttribute(2, "OnELCodeChanged", EventCallback.Factory.Create<MouseEventArgs>(this, CloseModal));
            builder.CloseComponent();
        };

        return renderFragment;
    }

    private async Task OpenModal()
    {
        ModalRef modalRef = default;

        var modalConfig = new ModalOptions
            {
                Title = _title,
                Visible = true,
                Draggable = true,
                ConfirmLoading = false,
                MaskClosable = false,
                Keyboard = false,
                Width = _width,
                Content = FormTemplate(),
                CancelText = _cancelText,
                OkText = _okText,
                OnOk = async (e) => 
                {
                    Console.WriteLine("Clicked on modal !!!");
                    
                    modalRef?.SetConfirmLoading(true);
                   
                    StateHasChanged();
                    await Task.Delay(3000);
                    
                    modalRef?.SetConfirmLoading(false);
                    await modalRef.CloseAsync();
            },
        };
        
        modalRef = _modalService.CreateModal(modalConfig);
    }

    private async Task OpenConfirm()
    {
        var confirmConfig = new ConfirmOptions
        {
            Title = _title,
            OkText = _okText,
            CancelText = _cancelText,
            Content ="content...",
            OnOk = async (e) => 
            { 
                Console.WriteLine("OK confirm"); 
                await Task.Delay(3000); 
            },
        };

        _modalService.Confirm(confirmConfig);
    }

    private void ShowModal()
    {
        _visible = true;
    }


    private async Task HandleOk(MouseEventArgs e)
    {
        Console.WriteLine("Clicked on modal");
        _modalText = "The modal will be closed after two seconds";
        _confirmLoading = true;
        StateHasChanged();
        await Task.Delay(3000);
        _visible = false;
        _confirmLoading = false;
    }

    private void HandleCancel(MouseEventArgs e)
    {
        Console.WriteLine("Clicked cancel button");
        _visible = false;
    }
}
